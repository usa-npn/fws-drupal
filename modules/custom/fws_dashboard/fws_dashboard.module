<?php

define('REFUGE_API', 'api/refuge');
define('REFUGE_DASHBOARD','dashboard');

define('REFUGE_DASHBOARD_THEME','refuge_dashboard');

define('NPN_CACHE_TTL_MINUTES','npn_cahe_ttl_minutes');
define('NPN_CACHE_TTL_MINUTES_DEFAULT','60');
define('NPN_API_ROOT','npn_api_root');
define('NPN_API_ROOT_DEFAULT','//www-dev.usanpn.org');
define('NPN_DATA_API_ROOT','npn_data_api_root');
define('NPN_DATA_API_ROOT_DEFAULT','//data-dev.usanpn.org:3006');
define('NPN_DATA_USE_STATS_CACHE','npn_data_use_stats_cache');


define('NPN_GEOSERVER_ROOT','npn_geoserver_root');
define('NPN_GEOSERVER_ROOT_DEFAULT','//geoserver-dev.usanpn.org/geoserver');

/**
 * Implements hook_menu
 */
function fws_dashboard_menu() {
    // for now no list resource, just an entity one since that's all that's necessary
    return array(
        REFUGE_API => array(
            'access callback' => TRUE,
            'page callback' => 'fws_dashboard_list',
        ),
        REFUGE_API.'/%fws_dashboard_refuge' => array(
             'access callback' => 'fws_dashboard_refuge_access',
             'access arguments' => array(2),
             'page callback' => 'fws_dashboard_refuge',
             'page arguments' => array(2),
             'type' => MENU_CALLBACK,
         ),
         'admin/config/services/fws_dashboard' => array(
            'title' => t('FWS Dashboard Services configuration'),
            'description' => t('Configure underlying web services used by the dashboard'),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('fws_dashboard_settings_form'),
            'access arguments' => array('administer fws_dashboard settings'),
            'type' => MENU_NORMAL_ITEM,
        ),
     );
}

/**
 * simple module configuration settings form allowing for the paths to the basic webservices to be
 * configured.  the path to the geoserver is still coded into the app configuration at the moment
 * not sure if there is a dev version of it or not.
 */
function fws_dashboard_settings_form() {
    return system_settings_form(array(
        NPN_CACHE_TTL_MINUTES => array(
            '#type' => 'textfield',
            '#title' => t('Client cache time to live (minutes)'),
            '#default_value' => variable_get(NPN_CACHE_TTL_MINUTES,NPN_CACHE_TTL_MINUTES_DEFAULT),
            '#description' => t('How long client browsers should cache responses from webservices.'),
            '#required' => FALSE,
            '#size' => 25,
        ),
        NPN_API_ROOT => array(
            '#type' => 'textfield',
            '#title' => t('URL of the NPN web services (defaults to: "'.NPN_API_ROOT_DEFAULT.'")'),
            '#default_value' => variable_get(NPN_API_ROOT,NPN_API_ROOT_DEFAULT),
            '#required' => TRUE,
            '#size' => 100,
        ),
        NPN_DATA_API_ROOT => array(
            '#type' => 'textfield',
            '#title' => t('URL of the NPN data web services (defaults to: "'.NPN_DATA_API_ROOT_DEFAULT.'")'),
            '#default_value' => variable_get(NPN_DATA_API_ROOT,NPN_DATA_API_ROOT_DEFAULT),
            '#required' => TRUE,
            '#size' => 100,
        ),
        NPN_DATA_USE_STATS_CACHE => array(
            '#type' => 'checkbox',
            '#title' => 'Use cache for statistics',
            '#default_value' => variable_get(NPN_DATA_USE_STATS_CACHE),
            '#required' => FALSE,
            '#size' => 25,
        ),
        NPN_GEOSERVER_ROOT => array(
            '#type' => 'textfield',
            '#title' => t('URL of the NPN geo server (defaults to: "'.NPN_GEOSERVER_ROOT_DEFAULT.'")'),
            '#default_value' => variable_get(NPN_GEOSERVER_ROOT,NPN_GEOSERVER_ROOT_DEFAULT),
            '#required' => TRUE,
            '#size' => 100,
        ),
    ));
}

/**
 * Implements hook_block_info()
 */
function fws_dashboard_block_info() {
    return array(
        'refuge_dashboard' => array(
            'info' => t('Refuge Dashboard'),
            'cache' => DRUPAL_NO_CACHE,
        ),
        'status_of_spring' => array(
            'info' => t('Refuge Status of Spring Dashboard'),
            'cache' => DRUPAL_NO_CACHE,
        ),
    );
}

/**
 * Implements hook_block_view()
 */
function fws_dashboard_block_view($delta='') {
    if($delta === 'refuge_dashboard' || $delta === 'status_of_spring') {

        $module_path = drupal_get_path('module','fws_dashboard');

        if($delta === 'refuge_dashboard') {
            $app_dir = $module_path.'/app';
        } else {
            $app_dir = $module_path.'/spring';
        }
        $files = file_scan_directory($app_dir,'/\.(js|css)$/');
        $js = array();
        $css = array();
        foreach($files as $file => $record) {
            $rel = $record->filename;
            if(preg_match('/\.js$/',$rel)) {
                $key = preg_replace('/^([^\.]+)\.(.*)$/','${1}',$rel);
                $js[$key] = $rel;
            } else {
                $css[] = $rel;
            }
        }
        $user_is_logged_in = user_is_logged_in() ? ' user_is_logged_in' : '';
        $npn_configuration = array(
            'cacheTTL' => intval(variable_get(NPN_CACHE_TTL_MINUTES,NPN_CACHE_TTL_MINUTES_DEFAULT)),
            'apiRoot' => variable_get(NPN_API_ROOT,NPN_API_ROOT_DEFAULT),
            'dataApiRoot' => variable_get(NPN_DATA_API_ROOT,NPN_DATA_API_ROOT_DEFAULT),
            'dataApiUseStatisticsCache' => variable_get(NPN_DATA_USE_STATS_CACHE) ? TRUE : FALSE,
            'geoServerRoot' => variable_get(NPN_GEOSERVER_ROOT,NPN_GEOSERVER_ROOT_DEFAULT),
        );
        $npn_configuration_json = drupal_json_encode($npn_configuration);
        $module_path = '/'.$module_path;
        $html = '';
        foreach($css as $f) { // empty on dev build
            $html .= "<link href=\"${app_dir}/${f}\" rel=\"stylesheet\"/>\n";
        }
        // TODO this doesn't appear to work properly in a production build for some reason
        $html .= "<script>\nvar npn_base_href = '${app_dir}/',\nnpn_configuration = ${npn_configuration_json};\n</script>";
        if($delta === 'refuge_dashboard') {
            $node = menu_get_object();
            $refuge = entity_metadata_wrapper('node', $node);
            $user_is_admin = fws_dashboard_user_is_admin($refuge) ? ' user_is_admin' :'';
            $refuge_id = $refuge->nid->value();
            $html .= "<refuge-dashboard refuge_id=\"${refuge_id}\"${user_is_logged_in}${user_is_admin}></refuge-dashboard>";
        } else {
            $html .= "<spring-dashboard ${user_is_logged_in}></spring-dashboard>";
        }
        $order = array('inline','polyfills','scripts','styles','vendor','main');
        foreach($order as $key) { // styles only there on dev build
            if(isset($js[$key])) {
                $f = $js[$key];
                $html .= "<script type=\"text/javascript\" src=\"${app_dir}/${f}\"></script>";
            }
        }
        return array(
            'content' => $html,
        );
    }
}

/**
 * auto loader for a refuge
 */
function fws_dashboard_refuge_load($refuge_id) {
    if (!ctype_digit($refuge_id)) { // !all digits (nid) like arctic-nwr
        $node_path = drupal_get_normal_path($refuge_id); // e.g. node/11
        if (preg_match('/^node\/\d+$/', $node_path) !== 1) {
            return NULL;
        }
        $path_parts = explode('/', $node_path);
        $refuge_id = $path_parts[1];
    }
    $node = node_load($refuge_id);
    if (!$node || $node->type !== 'refuge') {
        return NULL;
    }
    return entity_metadata_wrapper('node', $node);
}

/**
 * Fetches the list of administrator UIDS for $refuge
 */
function _fws_dashboard_refuge_admin_uids($refuge) {
    $network_id = $refuge->field_network_id->value();
    $cache_key = 'fws_dashboard_admins_'.$network_id;
    // look in Drupal's cache first to avoid a webservice call if possible.
    if($cache_data = cache_get($cache_key)) {
        return $cache_data->data;
    }
    $api = variable_get(NPN_API_ROOT,NPN_API_ROOT_DEFAULT);
    // if the config has left the scheme off then default to https
    if(preg_match('/^\/\//',$api)) {
        $api = 'https:'.$api;
    }
    $api_url = "${api}/npn_portal/networks/getAdminsForNetwork.json?network_id=${network_id}";
    watchdog('fws_dashboard','Asking webservice for refuge administrators via %URL',
        array(
            '%URL' => $api_url
        ),WATCHDOG_INFO);
    $api_response = drupal_http_request($api_url,array('method'=>'GET'));
    if($api_response->code != 200) {
        $msg = "Error asking web services for administrators for refuge %NETWORK_ID.";
        $msg .= ' RC: %RC';
        $msg .= ' MESSAGE: %MESSAGE';
        $vars = array(
            '%NETWORK_ID' => $network_id,
            '%RC' => $api_response->code,
            '%MESSAGE' => $api_response->status_message,
        );
        watchdog('fws_dashboard',$msg,$vars,WATCHDOG_ERROR);
        return FALSE; // can't verify one way or the other.
    }
    $uids = drupal_json_decode($api_response->data);
    if(!is_array($uids)) {
        watchdog('fws_dashboard','Unexpected response from %URL.  %DATA',
            array(
                '%URL' => $api_url,
                '%DATA' => $api_response->data,
            ),WATCHDOG_ERROR);
        $uids = array();
    }
    watchdog('fws_dashboard','Caching administrative uids from %URL %UIDS',
        array(
            '%URL' => $api_url,
            '%UIDS' => drupal_json_encode($uids),
        ),WATCHDOG_INFO);
    // put it in the cache for a time
    $one_hour = 3600;
    cache_set($cache_key,$uids,'cache',time()+$one_hour);
    return $uids;
}

/**
 * Tests whether the current user is a refuge admin
 */
function fws_dashboard_user_is_admin($refuge) {
    global $user;
    if(!$user->uid) {
        return FALSE; // anonymous, just avoid any other logic
    }
    if(is_array($user->roles) && in_array('administrator',$user->roles)) {
        return TRUE; // site admin avoid any other logic
    }
    // some other logged in, non site admin user
    // test if that user is an administrator for this refuge
    $admin_uids = _fws_dashboard_refuge_admin_uids($refuge);
    return in_array($user->uid,$admin_uids);
}

/**
 * access callback for the current request and refuge.
 */
function fws_dashboard_refuge_access($refuge) {
    return ($_SERVER['REQUEST_METHOD'] === 'GET') || // anyone can read a refuge
           ($_SERVER['REQUEST_METHOD'] === 'PUT' && fws_dashboard_user_is_admin($refuge)); // admins can update
}

/**
 * page callback for api/refuge/<refuge>
 */
function fws_dashboard_refuge($refuge) { // call GET or PUT based on
    if (!$refuge) {
        return drupal_not_found();
    }
    call_user_func('_fws_dashboard_refuge_'.$_SERVER['REQUEST_METHOD'],$refuge);
}

/**
 * Simple refuge api list.  Format response mimics firebase.
 */
function fws_dashboard_list() {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'refuge')
          ->propertyCondition('status', NODE_PUBLISHED);
    $result = $query->execute();
    $response = array();
    if(isset($result['node'])) {
        foreach (entity_load('node',array_keys($result['node'])) as $node) {
            $refuge = entity_metadata_wrapper('node', $node);
            $refuge_json = _fws_dashboard_refuge_s11n($refuge);
            $response[$refuge_json['id']] = $refuge_json;
        }
    }
    drupal_json_output($response);
    drupal_exit();
}

/**
 * serializes a refuge to an array for JSON output.
 */
function _fws_dashboard_refuge_s11n($refuge) {
    $terse = isset($_GET['terse']);
    $url_opts = array('absolute'=>TRUE);
    $path_alias = drupal_get_path_alias('node/'.$refuge->nid->value());
    // the location field unfortunately doesn't support entity metadata wrappers
    // get the raw data
    $raw = $refuge->raw();
    $location = isset($raw->field_refuge_location) && // tests just to be safe
                isset($raw->field_refuge_location['und']) &&
                isset($raw->field_refuge_location['und'][0]) ? $raw->field_refuge_location['und'][0] : NULL;
    $return = array(
         'id' => $path_alias,
         'nid' => intval($refuge->nid->value()),
         'title' => $refuge->label(),
         'network_id' => intval($refuge->field_network_id->value()),
         'boundary_id' => $refuge->field_refuge_boundary->value(),
         'location' => ($location && isset($location['latitude']) && isset($location['longitude'])) ?
            array( 'lat' => floatval($location['latitude']), 'lng' => floatval($location['longitude'])) : NULL,
         'links' => array(
             'self' => url(REFUGE_API.'/'.$path_alias,$url_opts),
             'dashboard' => url(REFUGE_DASHBOARD.'/'.$path_alias,$url_opts),
         ),
     );
     if(!$terse) {
         $selections = $refuge->field_saved_visualizations->value();
         $return['selections'] = $selections ? drupal_json_decode($selections) : array();

         $resources = $refuge->field_resources_for_observers->value();
         $return['resources'] = $resources ? $resources['value'] : NULL;
     }
     return $return;
}

/**
 * Simple HTTP GET for a single refuge.
 */
function _fws_dashboard_refuge_GET($refuge) {
     drupal_json_output(_fws_dashboard_refuge_s11n($refuge));
     drupal_exit();
}

/**
 * Simple HTTP PUT for a single refuge (only allows "selections" to be updated, ignores everything else).
 */
function _fws_dashboard_refuge_PUT($refuge) {
    if(!isset($_SERVER['CONTENT_TYPE']) || !strstr($_SERVER['CONTENT_TYPE'],'application/json')) {
        return drupal_not_found(); // 400 would be preferable but..
    }
    $input = drupal_json_decode(file_get_contents('php://input'));
    if(isset($input['selections'])) {
        $refuge->field_saved_visualizations->set(drupal_json_encode($input['selections']));
        $refuge->save();
    }
    _fws_dashboard_refuge_GET($refuge);
}
